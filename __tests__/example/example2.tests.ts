import { hex } from 'buffer-tag';
import fs from 'fs';

import { Verifier } from '../../src/index';

export const ISSUER_CERTIFICATE = fs.readFileSync(
  `${__dirname}/issuer.pem`,
  'utf-8',
);

describe('example 2: valid device response with partial disclosure', () => {
  const ephemeralReaderKey = hex`534b526561646572`;
  const encodedSessionTranscript = hex`d818589e83f6f68466313233343536782b437131616e506238765a55356a354330643768637362754a4c4270496177554a4944515269324562776234785c687474703a2f2f6c6f63616c686f73743a343030302f6170692f70726573656e746174696f6e5f726571756573742f64633839393964662d643665612d346338342d393938352d3337613862383161383265632f63616c6c6261636b6761626364656667`;
  const deviceResponse = hex`b900036776657273696f6e63312e3069646f63756d656e747381b9000367646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c6973737565725369676e6564b900026a6e616d65537061636573b90001716f72672e69736f2e31383031332e352e3186d8185867b90004686469676573744944006672616e646f6d58205daf6a1077dad6aace3a4c6774a8b3b8e7cbad501732c51a9fcc5e2670e3e7bc71656c656d656e744964656e7469666965726b66616d696c795f6e616d656c656c656d656e7456616c756565536d697468d8185865b90004686469676573744944016672616e646f6d58200ef437f6d7e3368ca5368dec12d920763c702d1f4032606cccc705cd87d0f2e171656c656d656e744964656e7469666965726a676976656e5f6e616d656c656c656d656e7456616c7565644a6f686ed818586eb90004686469676573744944026672616e646f6d5820e7d36046d7bf923104d42e3f8363bbaba7cb75bda603205fd652c2c0200aa7ba71656c656d656e744964656e7469666965726a62697274685f646174656c656c656d656e7456616c7565d903ec6a313938302d30362d3135d8185868b90004686469676573744944056672616e646f6d5820d41c8606e81b5a866bb508b83db289668b6171c9d06c5ea6907795cce33e17c671656c656d656e744964656e7469666965726f69737375696e675f636f756e7472796c656c656d656e7456616c7565625553d818586eb90004686469676573744944066672616e646f6d5820c9b41ca04d3e0faedffeeddf665ce0fc7f9cec72e4d2598231aecbafc0fb844271656c656d656e744964656e7469666965727169737375696e675f617574686f726974796c656c656d656e7456616c7565664e5920444d56d8185873b90004686469676573744944076672616e646f6d5820f6a12bf7e919e5cf830b64719bde0d726d2e012879e166c3499d7b93904efe6471656c656d656e744964656e7469666965727469737375696e675f6a7572697364696374696f6e6c656c656d656e7456616c7565684e657720596f726b6a697373756572417574688443a10126a20442313118218159022e3082022a308201d0a003020102021457c6ccd308bde43eca3744f2a87138dabbb884e8300a06082a8648ce3d0403023053310b30090603550406130255533111300f06035504080c084e657720596f726b310f300d06035504070c06416c62616e79310f300d060355040a0c064e5920444d56310f300d060355040b0c064e5920444d56301e170d3233303931343134353531385a170d3333303931313134353531385a3053310b30090603550406130255533111300f06035504080c084e657720596f726b310f300d06035504070c06416c62616e79310f300d060355040a0c064e5920444d56310f300d060355040b0c064e5920444d563059301306072a8648ce3d020106082a8648ce3d03010703420004893c2d8347906dc6cd69b7f636af4bfd533f96184f0aadacd10830da4471dbdb60ac170d1cfc534fae2d9dcd488f7747fdf978d925ea31e9e9083c382ba9ed53a38181307f301d0603551d0e04160414ab6d2e03b91d492240338fbccadefd9333eaf6c7301f0603551d23041830168014ab6d2e03b91d492240338fbccadefd9333eaf6c7300f0603551d130101ff040530030101ff302c06096086480186f842010d041f161d4f70656e53534c2047656e657261746564204365727469666963617465300a06082a8648ce3d0403020348003045022009fd0cab97b03e78f64e74d7dcee88668c476a0afc5aa2cebffe07d3be772ea9022100da38abc98a080f49f24ffece1fffc8a6cdd5b2c0b5da8fc7b767ac3a95dcb83e590319d818590314b900066776657273696f6e63312e306f646967657374416c676f726974686d675348412d3235366c76616c756544696765737473b900026f6f72672e637573746f6d2e74657374a100582085b5266e8b9cfcc6ee9e987fb0c39ae82290122ccc76ab39b9ef4d19187aeca6716f72672e69736f2e31383031332e352e31ac00582038a588bb9f6834a065bf76bfa6eb3245dd150401d5dcb9338c1dc3c133cf937a0158207778d99e4baba506799ed3737f024183f20c3f1fb95ff7202777c2c4c4186a4c025820db49c1948e04d674807c47f7eee5fdb1c9b5460e972d62c366625e320c783fe5035820d4f7232bc241d67dbd4efea72e4078935547b0a8fb339d0f81e4bac6ef41f6160458200e2220b3aefe8b4896adec8d6a324c6f65888650040dcb52acd4e4de2b2b670b055820189b2e1e51eae1d552d2c5209376d5890e95f99f8c102ef537849cac5525f5da0658203930845222e95f7cabd4c636c78a1a6ce7576e9af9880e59431ba5e7d1bad780075820923ca4caeeda2b8ae2107b33bc8b83e5cf231c24a874b743b6191508aaa6adfe0858209a80c30bf56223b7b043727265440f1ee1e2aa3e009c17d3d57bc81bb1ae0ed4095820519a122225e61824dc0d98d1138f60a5a0d061357a163e99d2fa149957fd61f70a5820bbd148c5016c3436b48b3eb7af2c61d7ba0107ea98cd3295ec76396a003a5f700b5820111c864f7b02d5e408652e423a762e10c3a2725fada3a881f583c062cb7040d06d6465766963654b6579496e666fb90001696465766963654b6579a40102215820881879ca7a238b19bf0f4c1f8c00e9a2e19ba7a6f73eae92b851d4de1b508559225820a314b538039127b5cd50735f54519e33c134450545c5603ad9f263facc56d377200167646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c76616c6964697479496e666fb90003667369676e6564c074323032332d30392d32395431353a35303a35365a6976616c696446726f6dc074323032332d30392d32395431353a35303a35365a6a76616c6964556e74696cc074323037332d30392d32395431353a35303a35365a58407c342c9076394972b7c3f8c75466425545b3dc1be89856ef4c2b086460461bf0c5191c906f1be6264f75cd32469903040f1e4a3e136e01ca3929f60ffd0d92416c6465766963655369676e6564b900026a6e616d65537061636573d81841a06a64657669636541757468b900016f6465766963655369676e61747572658443a10126a10442313158d2d81858ce847444657669636541757468656e7469636174696f6e83f6f68466313233343536782b437131616e506238765a55356a354330643768637362754a4c4270496177554a4944515269324562776234785c687474703a2f2f6c6f63616c686f73743a343030302f6170692f70726573656e746174696f6e5f726571756573742f64633839393964662d643665612d346338342d393938352d3337613862383161383265632f63616c6c6261636b6761626364656667756f72672e69736f2e31383031332e352e312e6d444cd81841a0584059839f348b403848827dddca5fae719027545c1ef864e46a43a00dc91edfccb82798d96a9dc6c04e58938b67a46470dada69cf391ce8da3772fcf55d16d3c0db6673746174757300`;

  it('should verify properly', async () => {
    await new Verifier([ISSUER_CERTIFICATE])
      .usingEphemeralReaderKey(ephemeralReaderKey)
      .usingSessionTranscriptBytes(encodedSessionTranscript)
      .verify(deviceResponse);
  });

  it('should be able to verify without ephemeralReaderKey and encodedSessionTrasncript', async () => {
    await new Verifier([ISSUER_CERTIFICATE])
      .usingEphemeralReaderKey(ephemeralReaderKey)
      .usingSessionTranscriptBytes(encodedSessionTranscript)
      .verify(
        deviceResponse,
        (verification, original) => {
          if (verification.category === 'DEVICE_AUTH') {
            return;
          }
          original(verification);
        },
      );
  });

  it('should contain only the disclosed fields', async () => {
    const { documents } = await new Verifier([ISSUER_CERTIFICATE])
      .usingEphemeralReaderKey(ephemeralReaderKey)
      .usingSessionTranscriptBytes(encodedSessionTranscript)
      .verify(deviceResponse);

    const numberOfAttributes = documents[0]
      .issuerSigned
      .nameSpaces['org.iso.18013.5.1']
      .length;

    expect(numberOfAttributes).toBe(6);
  });

  it('should validate the digest of all fields', async () => {
    const { documents } = await new Verifier([ISSUER_CERTIFICATE])
      .usingEphemeralReaderKey(ephemeralReaderKey)
      .usingSessionTranscriptBytes(encodedSessionTranscript)
      .verify(deviceResponse);
    const { issuerAuth } = documents[0].issuerSigned;

    const ns = 'org.iso.18013.5.1';
    const allFieldsAreValid = (await Promise.all(documents[0]
      .issuerSigned
      .nameSpaces[ns]
      .map((field) => field.isValid(ns, issuerAuth)))).every(Boolean);

    expect(allFieldsAreValid).toBe(true);
  });
});
